#!/bin/sh /etc/rc.common

START=99
XBOOT=0
extra_command "reconfig" ""

reconfig() {
	local dhcp_action
	[ "$(uci_get dhcp lan ignore)" ] && dhcp_action="set wizard.default.dhcp='0'" || dhcp_action="delete wizard.default.dhcp"

	uci -q batch <<-EOF >/dev/null
		set wizard.default.wan_proto="$(uci_get network wan proto)"
		set wizard.default.wan_pppoe_user="$(uci_get network wan username)"
		set wizard.default.wan_pppoe_pass="$(uci_get network wan password)"
		set wizard.default.lan_ipaddr="$(uci_get network lan ipaddr)"
		set wizard.default.lan_netmask="$(uci_get network lan netmask)"
		set wizard.default.lan_gateway="$(uci_get network lan gateway)"
		set wizard.default.lan_dns="$(uci_get network lan dns)"
		set wizard.default.ap_bridge_ip="$(uci_get network lan ipaddr)"
		set wizard.default.ap_netmask="$(uci_get network lan netmask)"
		set wizard.default.ap_gateway="$(uci_get network lan gateway)"
		set wizard.default.ap_dhcp="$(uci_get dhcp lan ignore '0')"
		set wizard.default.ap_bridge_interfaces="$(uci_get network lan ifname)"
		set wizard.default.siderouter_local_ip="$(uci_get network lan ipaddr)"
		set wizard.default.siderouter_netmask="$(uci_get network lan netmask)"
		set wizard.default.siderouter_main_router_ip="$(uci_get network wan gateway)"
		set wizard.default.siderouter_gateway="$(uci_get network wan gateway)"
		set wizard.default.siderouter_dhcp="$(uci_get dhcp lan ignore '0')"
		set wizard.default.siderouter_interfaces="$(uci_get network wan ifname)"
		$dhcp_action
		commit wizard
	EOF
}

uci_changes() {
	local changes
	changes=$(uci -q changes "$1")
	[ -n "$changes" ] && uci_commit "$1" && return 0
	return 1
}

get_config() {
	for val in "$@"; do
		config_get "$val" default "$val" ""
	done
}

add_wizard() {
	[ "$XBOOT" = 1 ] && return 0
	get_config wan_proto wan_ipaddr wan_netmask wan_gateway wan_dns lan_dns ipv6
	get_config ap_bridge_ip ap_netmask ap_gateway ap_dhcp ap_bridge_interfaces
	get_config siderouter_local_ip siderouter_netmask siderouter_main_router_ip siderouter_gateway siderouter_dhcp siderouter_interfaces
	device=$(uci_get network wan device || uci_get bk_network wan device "")
	ifname=$(uci_get network wan ifname "")

	case "$wan_proto" in
		pppoe)
			get_config wan_pppoe_user wan_pppoe_pass username_old password_old
			test -n "$device" && [ "$username_old" != "$wan_pppoe_user" -o "$password_old" != "$wan_pppoe_pass" ] && {
				uci_remove network wan
				uci_add network interface wan
				uci_set network wan proto 'pppoe'
				uci_set network wan device "$device"
				uci_set network wan username "$wan_pppoe_user"
				uci_set network wan password "$wan_pppoe_pass"
				uci_set network wan ipv6 "$ipv6"
				uci_set network wan keepalive '5 5'
				uci_set network wan mtu '1492'
				uci_set network wan metric '40'
				test -n "$ifname" && uci_set network wan ifname "$ifname"

				test -n "$wan_dns" && {
					uci_set network wan peerdns '0'
					uci_set network wan dns "$wan_dns"
				}
				uci_set wizard default username_old "$wan_pppoe_user"
				uci_set wizard default password_old "$wan_pppoe_pass"
			}
			;;
		dhcp)
			[ -z "$device" ] && return 1
			uci_remove network wan
			uci_add network interface wan
			uci_set network wan proto 'dhcp'
			uci_set network wan device "$device"
			test -n "$ifname" && uci_set network wan ifname "$ifname"
			test -n "$wan_dns" && {
				uci_set network wan peerdns '0'
				uci_set network wan dns "$wan_dns"
			}
			;;
		static)
			test -n "$wan_ipaddr" && test -n "$wan_netmask" && {
				uci_remove network wan
				uci_add network interface wan
				uci_set network wan proto 'static'
				uci_set network wan force_link '0'
				test -n "$device" && uci_set network wan device "$device"
				test -n "$ifname" && uci_set network wan ifname "$ifname"
				uci_set network wan metric '40'
				uci_set network wan ipaddr "$wan_ipaddr"
				uci_set network wan netmask "$wan_netmask"
				uci_set network wan gateway "$wan_gateway"

				test -n "$wan_dns" && {
					uci_set network wan peerdns '0'
					uci_set network wan dns "$wan_dns"
				}
			}
			;;
		ap)
			test -n "$ap_bridge_ip" && test -n "$ap_netmask" && {
				uci_remove network wan # 禁用 WAN 接口
				uci_set network lan ipaddr "$ap_bridge_ip"
				uci_set network lan netmask "$ap_netmask"
				uci_set network lan gateway "$ap_gateway"
				uci_set network lan type 'bridge'
				uci_set network lan ifname "$ap_bridge_interfaces"
				uci_set dhcp lan ignore "$ap_dhcp"
				test -n "$wan_dns" && {
					uci_set network lan dns "$wan_dns"
				}
			}
			;;
		siderouter)
			test -n "$siderouter_local_ip" && test -n "$siderouter_netmask" && {
				uci_set network lan ipaddr "$siderouter_local_ip"
				uci_set network lan netmask "$siderouter_netmask"
				uci_set network wan proto 'static'
				uci_set network wan ifname "$siderouter_interfaces"
				uci_set network wan gateway "$siderouter_gateway"
				uci_set dhcp lan ignore "$siderouter_dhcp"
				test -n "$wan_dns" && {
					uci_set network wan dns "$wan_dns"
				}
			}
			;;
	esac

	get_config lan_ipaddr lan_netmask lan_ipaddr_old lan_netmask_old
	[ "$lan_ipaddr" != "$lan_ipaddr_old" -o "$lan_netmask" != "$lan_netmask_old" ] && {
		uci_set network lan ipaddr "$lan_ipaddr"
		uci_set network lan netmask "$lan_netmask"
		uci_set wizard default lan_ipaddr_old "$lan_ipaddr"
		uci_set wizard default lan_netmask_old "$lan_netmask"
	}

	# 处理 LAN DNS
	test -n "$lan_dns" && {
		uci_remove network lan dns
		uci_remove dhcp lan ra_slaac
		for dns in $lan_dns; do
			uci_add_list network lan dns "$dns"
		done
	}

	get_config wifi_ssid wifi_key
	test -n "$wifi_ssid" && test -n "$wifi_key" && {
		get_config wifi_ssid_old wifi_key_old
		if [ "$wifi_ssid" != "$wifi_ssid_old" -o "$wifi_key" != "$wifi_key_old" ]; then
			for idx in `seq 0 64`; do
				uci_get wireless "@wifi-iface[$idx]" || break
				[ "$(uci_get wireless "@wifi-iface[$idx]" mode)" = "ap" ] && {
					uci_set wireless "@wifi-iface[$idx]" ssid "$wifi_ssid"
					uci_set wireless "@wifi-iface[$idx]" key "$wifi_key"
					uci_set wireless "@wifi-iface[$idx]" encryption 'psk2'
				}
				device=$(uci_get wireless "@wifi-iface[$idx]" device)
				[ "$(uci_get wireless "$device" band)" = "2g" ] || [ "$(uci_get wireless "$device" band)" = "5g" ] || {
					uci_set wireless "@wifi-iface[$idx]" ocv '0'
					uci_set wireless "@wifi-iface[$idx]" ssid "${wifi_ssid}_6G"
					uci_set wireless "@wifi-iface[$idx]" key "$wifi_key"
					uci_set wireless "@wifi-iface[$idx]" encryption 'sae'
					uci_remove wireless "@wifi-iface[$idx]" ft_psk_generate_local
					uci_set wireless "$device" country 'DE'
					uci_set wireless "$device" channel '21'
					uci_set wireless "$device" band '6g'
				}
			done
			uci_set wizard default wifi_key_old "$wifi_key"
			uci_set wizard default wifi_ssid_old "$wifi_ssid"
		fi
	}

	for config in network dhcp firewall wireless wizard; do
		if uci_changes "$config"; then
			case "$config" in
				wireless) wifi reload & ;;
				dhcp) /etc/init.d/dnsmasq reload & ;;
				network) /etc/init.d/network restart & ;;
				firewall) /etc/init.d/firewall reload & ;;
			esac
		fi
	done
}

start() {
	config_load wizard
	config_foreach add_wizard wizard
}

boot() {
	XBOOT=1
}
